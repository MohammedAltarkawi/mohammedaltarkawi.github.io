{"version":3,"file":"wdio.conf.js","names":["config","autoCompileOpts","autoCompile","specs","exclude","maxInstances","capabilities","browserName","args","process","argv","indexOf","acceptInsecureCerts","logLevel","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","mochaOpts","ui","timeout","__exports","__esModule"],"sources":["wdio.conf.ts"],"sourcesContent":["import { wdi5Config } from \"wdio-ui5-service\"\n\nexport const config: wdi5Config = {\n    // ====================\n    // wdi5 Configuration\n    // ====================\n    //\n    // wdi5: {\n    //     screenshotPath: require(\"path\").join(\"some\", \"dir\", \"for\", \"screenshots\"),c // [optional] {string}, default: \"\"\n    //     screenshotsDisabled: false, // [optional] {boolean}, default: false; if set to true, screenshots won't be taken and not written to file system\n    //     logLevel: \"error\", // [optional] error | verbose | silent, default: \"error\"\n    //     skipInjectUI5OnStart: false, // [optional] {boolean}, default: false; true when UI5 is not on the start page, you need to later call <wdioUI5service>.injectUI5() manually\n    //     waitForUI5Timeout: 15000 // [optional] {number}, default: 15000; maximum waiting time in milliseconds while checking for UI5 availability\n    //     btpWorkZoneEnablement: false // [optional] {boolean}, default: false; whether to instruct wdi5 to inject itself in both the SAP Build Workzone, standard edition, shell and app\n    // },\n    //\n    // ====================\n    // Runner Configuration\n    // ====================\n    //\n    //\n    // =====================\n    // ts-node Configurations\n    // =====================\n    //\n    // You can write tests using TypeScript to get autocompletion and type safety.\n    // You will need typescript and ts-node installed as devDependencies.\n    // WebdriverIO will automatically detect if these dependencies are installed\n    // and will compile your config and tests for you.\n    // If you need to configure how ts-node runs please use the\n    // environment variables for ts-node or use wdio config's autoCompileOpts section.\n    //\n\n    autoCompileOpts: {\n        autoCompile: true\n        // see https://github.com/TypeStrong/ts-node#cli-and-programmatic-options\n        // for all available options\n        // tsNodeOpts: {\n        //     transpileOnly: true,\n        //     project: \"./test/tsconfig.json\"\n        // }\n        // tsconfig-paths is only used if \"tsConfigPathsOpts\" are provided, if you\n        // do please make sure \"tsconfig-paths\" is installed as dependency\n        // tsConfigPathsOpts: {\n        //     baseUrl: './'\n        // }\n    },\n    //\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // from which `wdio` was called.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n    // then the current working directory is where your `package.json` resides, so `wdio`\n    // will be called from there.\n    //\n    specs: [\"./**/*.test.ts\"],\n    // Patterns to exclude.\n    exclude: [\n        // 'path/to/excluded/files'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n    // order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\n    // and 30 processes will get spawned. The property handles how many capabilities\n    // from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://saucelabs.com/platform/platform-configurator\n    //\n    capabilities: [\n        {\n            // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n            // grid with only 5 firefox instances available you can make sure that not more than\n            // 5 instances get started at a time.\n            // maxInstances: 5,\n            browserName: \"chrome\",\n            \"goog:chromeOptions\": {\n                args:\n                    process.argv.indexOf(\"--headless\") > -1\n                        ? [\"--headless\"]\n                        : process.argv.indexOf(\"--debug\") > -1\n                          ? [\"window-size=1440,800\", \"--auto-open-devtools-for-tabs\"]\n                          : [\"window-size=1440,800\"]\n            },\n            acceptInsecureCerts: true\n            // If outputDir is provided WebdriverIO can capture driver session logs\n            // it is possible to configure which logTypes to include/exclude.\n            // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n            // excludeDriverLogs: ['bugreport', 'server'],\n        }\n    ],\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: \"error\",\n    //\n    // Set specific log levels per logger\n    // loggers:\n    // - webdriver, webdriverio\n    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n    // - @wdio/mocha-framework, @wdio/jasmine-framework\n    // - @wdio/local-runner\n    // - @wdio/sumologic-reporter\n    // - @wdio/cli, @wdio/config, @wdio/utils\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    // logLevels: {\n    //     webdriver: 'info',\n    //     '@wdio/appium-service': 'info'\n    // },\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n    // gets prepended directly.\n    baseUrl: \"http://localhost:8080/index.html\",\n    //\n    // Default timeout for all waitFor* commands.\n    waitforTimeout: 10000,\n    //\n    // Default timeout in milliseconds for request\n    // if browser driver or grid doesn't send response\n    connectionRetryTimeout: process.argv.indexOf(\"--debug\") > -1 ? 1200000 : 120000,\n    //\n    // Default request retries count\n    connectionRetryCount: 3,\n    //\n    // Test runner services\n    // Services take over a specific job you don't want to take care of. They enhance\n    // your test setup with almost no effort. Unlike plugins, they don't add new\n    // commands. Instead, they hook themselves up into the test process.\n    services: [\"ui5\"],\n\n    // Framework you want to run your specs with.\n    // The following are supported: Mocha, Jasmine, and Cucumber\n    // see also: https://webdriver.io/docs/frameworks\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed\n    // before running any tests.\n    framework: \"mocha\",\n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    // specFileRetries: 1,\n    //\n    // Delay in seconds between the spec file retry attempts\n    // specFileRetriesDelay: 0,\n    //\n    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n    // specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: [\"spec\"],\n\n    //\n    // Options to be passed to Mocha.\n    // See the full list at http://mochajs.org/\n    mochaOpts: {\n        ui: \"bdd\",\n        timeout: process.argv.indexOf(\"--debug\") > -1 ? 600000 : 60000\n    }\n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n    // it and to build services around it. You can either apply a single function or an array of\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n    // resolved to continue.\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    // onPrepare: function (config, capabilities) {\n    // },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialise specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized\n     * @param  {[type]} execArgv list of string arguments passed to the worker process\n     */\n    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    // },\n    /**\n     * Gets executed just after a worker process has exited.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {Number} exitCode 0 - success, 1 - fail\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {Number} retries  number of retries used\n     */\n    // onWorkerEnd: function (cid, exitCode, specs, retries) {\n    // },\n    /**\n     * Gets executed just before initialising the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     * @param {String} cid worker id (e.g. 0-0)\n     */\n    // beforeSession: function (config, capabilities, specs, cid) {\n    // },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {Object}         browser      instance of created browser/device session\n     */\n    // before: function (capabilities, specs) {\n    // },\n    /**\n     * Runs before a WebdriverIO command gets executed.\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     */\n    // beforeCommand: function (commandName, args) {\n    // },\n    /**\n     * Hook that gets executed before the suite starts\n     * @param {Object} suite suite details\n     */\n    // beforeSuite: function (suite) {\n    // },\n    /**\n     * Function to be executed before a test (in Mocha/Jasmine) starts.\n     */\n    // beforeTest: function (test, context) {\n    // },\n    /**\n     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n     * beforeEach in Mocha)\n     */\n    // beforeHook: function (test, context) {\n    // },\n    /**\n     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n     * afterEach in Mocha)\n     */\n    // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n    // },\n    /**\n     * Function to be executed after a test (in Mocha/Jasmine only)\n     * @param {Object}  test             test object\n     * @param {Object}  context          scope object the test was executed with\n     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n     * @param {Any}     result.result    return object of test function\n     * @param {Number}  result.duration  duration of test\n     * @param {Boolean} result.passed    true if test has passed, otherwise false\n     * @param {Object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n     */\n    // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n    // },\n\n    /**\n     * Hook that gets executed after the suite has ended\n     * @param {Object} suite suite details\n     */\n    // afterSuite: function (suite) {\n    // },\n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {Number} result 0 - command success, 1 - command error\n     * @param {Object} error error object if any\n     */\n    // afterCommand: function (commandName, args, result, error) {\n    // },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {Number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // after: function (result, capabilities, specs) {\n    // },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // afterSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed after all workers got shut down and the process is about to exit. An error\n     * thrown in the onComplete hook will result in the test run failing.\n     * @param {Object} exitCode 0 - success, 1 - fail\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    // onComplete: function(exitCode, config, capabilities, results) {\n    // },\n    /**\n     * Gets executed when a refresh happens.\n     * @param {String} oldSessionId session ID of the old session\n     * @param {String} newSessionId session ID of the new session\n     */\n    // onReload: function(oldSessionId, newSessionId) {\n    // }\n}\n"],"mappings":"sDAEO,MAAMA,EAAqB,CA+B9BC,gBAAiB,CACbC,YAAa,MA6BjBC,MAAO,CAAC,kBAERC,QAAS,GAmBTC,aAAc,GAMdC,aAAc,CACV,CAKIC,YAAa,SACb,qBAAsB,CAClBC,KACIC,QAAQC,KAAKC,QAAQ,eAAiB,EAChC,CAAC,cACDF,QAAQC,KAAKC,QAAQ,YAAc,EACjC,CAAC,uBAAwB,iCACzB,CAAC,yBAEjBC,oBAAqB,OAc7BC,SAAU,QAkBVC,KAAM,EAMNC,QAAS,mCAGTC,eAAgB,IAIhBC,uBAAwBR,QAAQC,KAAKC,QAAQ,YAAc,EAAI,KAAU,KAGzEO,qBAAsB,EAMtBC,SAAU,CAAC,OAQXC,UAAW,QAcXC,UAAW,CAAC,QAKZC,UAAW,CACPC,GAAI,MACJC,QAASf,QAAQC,KAAKC,QAAQ,YAAc,EAAI,IAAS,MAoJhE,IAAAc,EAAA,CAAAC,WAAA,MAAAD,EAAAzB,SAAA,OAAAyB,CAAA","ignoreList":[]}